schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type AccountNotificationsEdit {
  id: String!
  notifyOnMessage: Boolean!
}

type AccountProfileEdit {
  id: String!
  firstName: String
  lastName: String
  businessName: String
  email: String!
  phone: String
  username: String!
  telegramUsername: String
  website: String
  location: String
  job: String
  about: String!
}

type Address {
  attention: String
  line1: String
  line2: String
  mak: String
  postalCode: PostalCode
  postalCodeId: String
  postalExt: String
  user: ApplicationUser!
  userId: String!
  priority: Int!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

type ApplicationUser {
  businessName: String
  prefix: String
  firstName: String
  middleName: String
  lastName: String
  suffix: String
  gender: String
  birthdate: DateTime
  knownAs: String
  registered: DateTime
  lastLogin: DateTime
  updated: DateTime
  approved: Boolean
  approvedById: String
  approvedBy: ApplicationUser
  sellerApproved: Boolean
  sellerApprovedById: String
  sellerApprovedBy: ApplicationUser
  approvedUsers: [ApplicationUser!]!
  sellerApprovedUsers: [ApplicationUser!]!
  profileImage: [Byte!]
  backgroundImage: [Byte!]
  about: String!
  location: String
  job: String
  listings: Long!
  sentMessages: [Message!]!
  receivedMessages: [Message!]!
  myFriends: [Friend!]!
  friends: [Friend!]!
  addresses: [Address!]!
  website: String
  telegramUsername: String
  notifyOnMessage: Boolean!
  churchGroup: String!
  church: String
  postResponses: [UserPostResponse!]!
  posts: [UserPost!]!
  categories: [UserListingCategory!]!
  reviews: [ListingReview!]!
  watchedItems: [UserListingWatch!]!
  id: String!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
  following: Long!
  followers: Long!
  fullName: String!
}

type Asset {
  extension: String!
  data: [Byte!]!
  id: UUID!
  added: DateTime!
  updated: DateTime!
  name: String!
  notes: String
}

type ChurchGroup {
  id: String!
  name: String!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type DashboardStats {
  users: Int!
}

type Friend {
  userId: String!
  user: ApplicationUser!
  friendUserId: String!
  friendUser: ApplicationUser!
  befriended: DateTime!
}

type Listing {
  title: String!
  content: String!
  price: Decimal!
  msrp: Decimal
  partNumber: String
  serialNumber: String
  unit: String!
  user: ApplicationUser
  userId: String
  type: ListingType!
  typeId: String!
  images: [ListingImage!]!
  isPublished: Boolean!
  quantity: Int!
  acceptsOffers: Boolean!
  dateSold: DateTime
  category: ListingCategory
  categoryId: String
  reviews: [ListingReview!]!
  usersWatching: [UserListingWatch!]!
  id: UUID!
  added: DateTime!
  updated: DateTime!
  mainImageId: UUID
  ratings: [ListingRating!]!
  totalReviews: Int!
  ratingsAverage: Decimal
  watched: Boolean!
}

"A connection to a list of items."
type ListingCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListingCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [ListingCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListingCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ListingCategory!
}

type ListingCategory {
  parentId: String
  parent: ListingCategory
  listable: Boolean!
  id: String!
  added: DateTime!
  updated: DateTime!
  name: String!
  notes: String
}

type ListingCategoryEdit {
  id: String!
  name: String!
  parentId: String
  listable: Boolean!
}

type ListingEdit {
  id: UUID!
  title: String!
  content: String!
  serialNumber: String
  partNumber: String
  quantity: Int!
  categoryId: String
  unit: String!
  price: Decimal!
  msrp: Decimal
  isPublished: Boolean!
  acceptsOffers: Boolean!
  images: [ListingImage!]!
}

type ListingImage {
  listing: Listing!
  listingId: UUID!
  definition: [Byte!]!
  order: Int!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

type ListingListEdit {
  id: UUID!
  quantity: Int!
  price: Decimal!
  isPublished: Boolean!
}

type ListingRating {
  star: Int!
  value: Int!
  count: Int!
}

type ListingReview {
  listing: Listing!
  listingId: UUID!
  user: ApplicationUser!
  userId: String!
  title: String
  content: String!
  rating: Decimal!
  verified: Boolean!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

type ListingReviewEdit {
  id: UUID
  listingId: UUID!
  title: String
  content: String!
  rating: Decimal!
}

type ListingStatistics {
  all: Int!
  published: Int!
  draft: Int!
}

type ListingType {
  id: String!
  name: String!
}

"A connection to a list of items."
type ListingTypesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListingTypesEdge!]
  "A flattened list of the nodes."
  nodes: [ListingType!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListingTypesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ListingType!
}

"A connection to a list of items."
type ListingsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ListingsEdge!]
  "A flattened list of the nodes."
  nodes: [Listing!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ListingsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Listing!
}

type Message {
  subject: String!
  date: DateTime!
  content: String!
  fromUserId: String!
  fromUser: ApplicationUser!
  toUserId: String!
  toUser: ApplicationUser!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

type Mutation {
  currentAccountProfile(profileEdit: AccountProfileEditInput!): AccountProfileEdit!
  currentAccountNotifications(notificationsEdit: AccountNotificationsEditInput!): AccountNotificationsEdit!
  deleteUser(id: String ids: [String!]): Boolean!
  uploadCurrentProfileImage(file: Upload!): Boolean!
  uploadCurrentBackgroundImage(file: Upload!): Boolean!
  changeAccountPassword(existingPassword: String! newPassword: String!): Boolean!
  addListingCategory(category: ListingCategoryEditInput!): ListingCategoryEdit!
  updateListingCategory(category: ListingCategoryEditInput!): ListingCategoryEdit!
  deleteListingCategory(id: String!): Boolean!
  addListing(listing: ListingAddEditInput!): UUID!
  listingList(listing: ListingListEditInput!): ListingListEdit!
  quickListing(listing: QuickListingEditInput!): QuickListingEdit!
  listing(listing: ListingEditInput!): ListingEdit!
  deleteListing(id: UUID ids: [UUID!]): Boolean!
  toggleListingPublicity(id: UUID!): Boolean!
  updateListingReview(review: ListingReviewEditInput!): ListingReviewEdit!
  deleteListingReview(listingId: UUID!): Boolean!
  addListingType(type: ListingTypeInput!): ListingType!
  updateListingType(type: ListingTypeInput!): ListingType!
  deleteListingType(id: String!): Boolean!
  quickUser(id: String! profileEdit: QuickUserEditInput!): QuickUserEdit!
  user(id: String! profileEdit: UserEditInput!): UserEdit!
  userList(id: String! profileEdit: UserListEditInput!): UserListEdit!
  userNotifications(id: String! notificationsEdit: UserNotificationsEditInput!): UserNotificationsEdit!
  uploadUserProfileImage(file: Upload! id: String!): Boolean!
  uploadUserBackgroundImage(file: Upload! id: String!): Boolean!
  changeUserPassword(id: String! existingPassword: String! newPassword: String!): Boolean!
  registerUser(user: RegisterUserEditInput!): String!
  toggleWatch(listingId: UUID!): Boolean!
}

type Notice {
  title: String
  content: String!
  signature: String
  start: DateTime
  end: DateTime
  isActive: Boolean!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

"A segment of a collection."
type OffsetUsersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [ApplicationUser!]
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type PostalCode {
  city: String!
  country: String
  id: String!
  state: String!
}

type Query {
  currentAccountProfile: AccountProfileEdit!
  currentAccountNotifications: AccountNotificationsEdit!
  currentAccountProfileImage: [Byte!]
  assets: [Asset!]!
  churchGroups(order: [ChurchGroupSortInput!]): [ChurchGroup!]!
  dashboardStatistics: DashboardStats
  listingCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [ListingCategorySortInput!] where: ListingCategoryFilterInput): ListingCategoriesConnection
  listings("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [ListingSortInput!] where: ListingFilterInput): ListingsConnection
  quickListing(id: UUID!): QuickListingEdit!
  listingEdit(id: UUID!): ListingEdit!
  listingStatistics: ListingStatistics!
  myListingReview(listingId: UUID!): ListingReviewEdit
  listingTypes("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [ListingTypeSortInput!] where: ListingTypeFilterInput): ListingTypesConnection
  notices: [Notice!]!
  quickUserProfile(id: String!): QuickUserEdit!
  userProfile(id: String!): UserEdit!
  userNotifications(id: String!): UserNotificationsEdit!
  users("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ApplicationUserFilterInput order: [ApplicationUserSortInput!]): UsersConnection
  offsetUsers(skip: Int take: Int where: ApplicationUserFilterInput order: [ApplicationUserSortInput!]): OffsetUsersCollectionSegment
  totalUsers: Int!
  userSearch(skip: Int take: Int search: String): UserSearchCollectionSegment
  userProfileImage(id: String!): [Byte!]
  userStatistics: UserStatistics!
  watchedListings(order: [UserListingWatchSortInput!]): [UserListingWatch!]!
}

type QuickListingEdit {
  id: UUID!
  title: String!
  serialNumber: String
  partNumber: String
  quantity: Int!
  unit: String!
  price: Decimal!
  msrp: Decimal
  isPublished: Boolean!
  acceptsOffers: Boolean!
}

type QuickUserEdit {
  id: String!
  firstName: String
  lastName: String
  businessName: String
  email: String!
  phone: String
  username: String!
  telegramUsername: String
  website: String
  location: String
  job: String
  about: String!
}

type Subscription {
  test: String!
}

type UserEdit {
  id: String!
  firstName: String
  lastName: String
  businessName: String
  email: String!
  phone: String
  username: String!
  telegramUsername: String
  website: String
  location: String
  job: String
  about: String!
  churchGroup: String!
  emailVerified: Boolean!
  phoneVerified: Boolean!
  approved: Boolean!
  sellerApproved: Boolean!
}

type UserListEdit {
  id: String!
  firstName: String
  lastName: String
  businessName: String
  userName: String
  email: String!
  phoneNumber: String
  location: String
  approved: Boolean
  sellerApproved: Boolean
}

type UserListingCategory {
  user: ApplicationUser!
  userId: String!
  category: ListingCategory!
  categoryId: String!
}

type UserListingWatch {
  user: ApplicationUser!
  userId: String!
  listing: Listing!
  listingId: UUID!
  date: DateTime!
}

type UserNotificationsEdit {
  id: String!
  notifyOnMessage: Boolean!
}

type UserPost {
  userId: String!
  user: ApplicationUser!
  content: String!
  title: String!
  media: [Byte!]!
  date: DateTime!
  responses: [UserPostResponse!]!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

type UserPostResponse {
  postId: UUID!
  post: UserPost!
  userId: String!
  user: ApplicationUser!
  content: String!
  isReaction: Boolean!
  date: DateTime!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

"A segment of a collection."
type UserSearchCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [ApplicationUser!]
}

type UserStatistics {
  all: Int!
  approved: Int!
  pending: Int!
  rejected: Int!
}

"A connection to a list of items."
type UsersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UsersEdge!]
  "A flattened list of the nodes."
  nodes: [ApplicationUser!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type UsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ApplicationUser!
}

input AccountNotificationsEditInput {
  id: String!
  notifyOnMessage: Boolean!
}

input AccountProfileEditInput {
  id: String!
  firstName: String
  lastName: String
  businessName: String
  email: String!
  phone: String
  username: String!
  telegramUsername: String
  website: String
  location: String
  job: String
  about: String!
}

input AddressFilterInput {
  and: [AddressFilterInput!]
  or: [AddressFilterInput!]
  attention: StringOperationFilterInput
  line1: StringOperationFilterInput
  line2: StringOperationFilterInput
  mak: StringOperationFilterInput
  postalCode: PostalCodeFilterInput
  postalCodeId: StringOperationFilterInput
  postalExt: StringOperationFilterInput
  user: ApplicationUserFilterInput
  userId: StringOperationFilterInput
  priority: IntOperationFilterInput
  id: UuidOperationFilterInput
  added: DateTimeOperationFilterInput
  updated: DateTimeOperationFilterInput
}

input AddressInput {
  attention: String
  line1: String
  line2: String
  mak: String
  postalCode: PostalCodeInput
  postalCodeId: String
  postalExt: String
  user: ApplicationUserInput!
  userId: String!
  priority: Int!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

input ApplicationUserFilterInput {
  and: [ApplicationUserFilterInput!]
  or: [ApplicationUserFilterInput!]
  businessName: StringOperationFilterInput
  prefix: StringOperationFilterInput
  firstName: StringOperationFilterInput
  middleName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  suffix: StringOperationFilterInput
  gender: StringOperationFilterInput
  birthdate: DateTimeOperationFilterInput
  knownAs: StringOperationFilterInput
  registered: DateTimeOperationFilterInput
  lastLogin: DateTimeOperationFilterInput
  updated: DateTimeOperationFilterInput
  approved: BooleanOperationFilterInput
  approvedById: StringOperationFilterInput
  approvedBy: ApplicationUserFilterInput
  sellerApproved: BooleanOperationFilterInput
  sellerApprovedById: StringOperationFilterInput
  sellerApprovedBy: ApplicationUserFilterInput
  approvedUsers: ListFilterInputTypeOfApplicationUserFilterInput
  sellerApprovedUsers: ListFilterInputTypeOfApplicationUserFilterInput
  profileImage: ListByteOperationFilterInput
  backgroundImage: ListByteOperationFilterInput
  about: StringOperationFilterInput
  location: StringOperationFilterInput
  job: StringOperationFilterInput
  listings: ListFilterInputTypeOfListingFilterInput
  sentMessages: ListFilterInputTypeOfMessageFilterInput
  receivedMessages: ListFilterInputTypeOfMessageFilterInput
  myFriends: ListFilterInputTypeOfFriendFilterInput
  friends: ListFilterInputTypeOfFriendFilterInput
  addresses: ListFilterInputTypeOfAddressFilterInput
  website: StringOperationFilterInput
  telegramUsername: StringOperationFilterInput
  notifyOnMessage: BooleanOperationFilterInput
  churchGroup: StringOperationFilterInput
  church: StringOperationFilterInput
  postResponses: ListFilterInputTypeOfUserPostResponseFilterInput
  posts: ListFilterInputTypeOfUserPostFilterInput
  categories: ListFilterInputTypeOfUserListingCategoryFilterInput
  reviews: ListFilterInputTypeOfListingReviewFilterInput
  watchedItems: ListFilterInputTypeOfUserListingWatchFilterInput
  id: StringOperationFilterInput
  userName: StringOperationFilterInput
  normalizedUserName: StringOperationFilterInput
  email: StringOperationFilterInput
  normalizedEmail: StringOperationFilterInput
  emailConfirmed: BooleanOperationFilterInput
  passwordHash: StringOperationFilterInput
  securityStamp: StringOperationFilterInput
  concurrencyStamp: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  phoneNumberConfirmed: BooleanOperationFilterInput
  twoFactorEnabled: BooleanOperationFilterInput
  lockoutEnd: DateTimeOperationFilterInput
  lockoutEnabled: BooleanOperationFilterInput
  accessFailedCount: IntOperationFilterInput
}

input ApplicationUserInput {
  businessName: String
  prefix: String
  firstName: String
  middleName: String
  lastName: String
  suffix: String
  gender: String
  birthdate: DateTime
  knownAs: String
  registered: DateTime
  lastLogin: DateTime
  updated: DateTime
  approved: Boolean
  approvedById: String
  approvedBy: ApplicationUserInput
  sellerApproved: Boolean
  sellerApprovedById: String
  sellerApprovedBy: ApplicationUserInput
  approvedUsers: [ApplicationUserInput!]!
  sellerApprovedUsers: [ApplicationUserInput!]!
  profileImage: [Byte!]
  backgroundImage: [Byte!]
  about: String!
  location: String
  job: String
  listings: [ListingInput!]!
  sentMessages: [MessageInput!]!
  receivedMessages: [MessageInput!]!
  myFriends: [FriendInput!]!
  friends: [FriendInput!]!
  addresses: [AddressInput!]!
  website: String
  telegramUsername: String
  notifyOnMessage: Boolean!
  churchGroup: String!
  church: String
  postResponses: [UserPostResponseInput!]!
  posts: [UserPostInput!]!
  categories: [UserListingCategoryInput!]!
  reviews: [ListingReviewInput!]!
  watchedItems: [UserListingWatchInput!]!
  id: String!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

input ApplicationUserSortInput {
  businessName: SortEnumType
  prefix: SortEnumType
  firstName: SortEnumType
  middleName: SortEnumType
  lastName: SortEnumType
  suffix: SortEnumType
  gender: SortEnumType
  birthdate: SortEnumType
  knownAs: SortEnumType
  registered: SortEnumType
  lastLogin: SortEnumType
  updated: SortEnumType
  approved: SortEnumType
  approvedById: SortEnumType
  approvedBy: ApplicationUserSortInput
  sellerApproved: SortEnumType
  sellerApprovedById: SortEnumType
  sellerApprovedBy: ApplicationUserSortInput
  about: SortEnumType
  location: SortEnumType
  job: SortEnumType
  website: SortEnumType
  telegramUsername: SortEnumType
  notifyOnMessage: SortEnumType
  churchGroup: SortEnumType
  church: SortEnumType
  id: SortEnumType
  userName: SortEnumType
  normalizedUserName: SortEnumType
  email: SortEnumType
  normalizedEmail: SortEnumType
  emailConfirmed: SortEnumType
  passwordHash: SortEnumType
  securityStamp: SortEnumType
  concurrencyStamp: SortEnumType
  phoneNumber: SortEnumType
  phoneNumberConfirmed: SortEnumType
  twoFactorEnabled: SortEnumType
  lockoutEnd: SortEnumType
  lockoutEnabled: SortEnumType
  accessFailedCount: SortEnumType
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ByteOperationFilterInput {
  eq: Byte
  neq: Byte
  in: [Byte]
  nin: [Byte]
  gt: Byte
  ngt: Byte
  gte: Byte
  ngte: Byte
  lt: Byte
  nlt: Byte
  lte: Byte
  nlte: Byte
}

input ChurchGroupSortInput {
  id: SortEnumType
  name: SortEnumType
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input FriendFilterInput {
  and: [FriendFilterInput!]
  or: [FriendFilterInput!]
  userId: StringOperationFilterInput
  user: ApplicationUserFilterInput
  friendUserId: StringOperationFilterInput
  friendUser: ApplicationUserFilterInput
  befriended: DateTimeOperationFilterInput
}

input FriendInput {
  userId: String!
  user: ApplicationUserInput!
  friendUserId: String!
  friendUser: ApplicationUserInput!
  befriended: DateTime!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListByteOperationFilterInput {
  all: ByteOperationFilterInput
  none: ByteOperationFilterInput
  some: ByteOperationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAddressFilterInput {
  all: AddressFilterInput
  none: AddressFilterInput
  some: AddressFilterInput
  any: Boolean
}

input ListFilterInputTypeOfApplicationUserFilterInput {
  all: ApplicationUserFilterInput
  none: ApplicationUserFilterInput
  some: ApplicationUserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFriendFilterInput {
  all: FriendFilterInput
  none: FriendFilterInput
  some: FriendFilterInput
  any: Boolean
}

input ListFilterInputTypeOfListingFilterInput {
  all: ListingFilterInput
  none: ListingFilterInput
  some: ListingFilterInput
  any: Boolean
}

input ListFilterInputTypeOfListingImageFilterInput {
  all: ListingImageFilterInput
  none: ListingImageFilterInput
  some: ListingImageFilterInput
  any: Boolean
}

input ListFilterInputTypeOfListingReviewFilterInput {
  all: ListingReviewFilterInput
  none: ListingReviewFilterInput
  some: ListingReviewFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMessageFilterInput {
  all: MessageFilterInput
  none: MessageFilterInput
  some: MessageFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserListingCategoryFilterInput {
  all: UserListingCategoryFilterInput
  none: UserListingCategoryFilterInput
  some: UserListingCategoryFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserListingWatchFilterInput {
  all: UserListingWatchFilterInput
  none: UserListingWatchFilterInput
  some: UserListingWatchFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserPostFilterInput {
  all: UserPostFilterInput
  none: UserPostFilterInput
  some: UserPostFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserPostResponseFilterInput {
  all: UserPostResponseFilterInput
  none: UserPostResponseFilterInput
  some: UserPostResponseFilterInput
  any: Boolean
}

input ListingAddEditInput {
  title: String!
  content: String!
  serialNumber: String
  partNumber: String
  quantity: Int!
  categoryId: String!
  unit: String!
  price: Decimal!
  msrp: Decimal
  isPublished: Boolean!
  acceptsOffers: Boolean!
}

input ListingCategoryEditInput {
  id: String!
  name: String!
  parentId: String
  listable: Boolean!
}

input ListingCategoryFilterInput {
  and: [ListingCategoryFilterInput!]
  or: [ListingCategoryFilterInput!]
  parentId: StringOperationFilterInput
  parent: ListingCategoryFilterInput
  listable: BooleanOperationFilterInput
  id: StringOperationFilterInput
  added: DateTimeOperationFilterInput
  updated: DateTimeOperationFilterInput
  name: StringOperationFilterInput
  notes: StringOperationFilterInput
}

input ListingCategoryInput {
  parentId: String
  parent: ListingCategoryInput
  listable: Boolean!
  id: String!
  added: DateTime!
  updated: DateTime!
  name: String!
  notes: String
}

input ListingCategorySortInput {
  parentId: SortEnumType
  parent: ListingCategorySortInput
  listable: SortEnumType
  id: SortEnumType
  added: SortEnumType
  updated: SortEnumType
  name: SortEnumType
  notes: SortEnumType
}

input ListingEditInput {
  id: UUID!
  title: String!
  content: String!
  serialNumber: String
  partNumber: String
  quantity: Int!
  categoryId: String
  unit: String!
  price: Decimal!
  msrp: Decimal
  isPublished: Boolean!
  acceptsOffers: Boolean!
  images: [ListingImageInput!]!
}

input ListingFilterInput {
  and: [ListingFilterInput!]
  or: [ListingFilterInput!]
  title: StringOperationFilterInput
  content: StringOperationFilterInput
  price: DecimalOperationFilterInput
  msrp: DecimalOperationFilterInput
  partNumber: StringOperationFilterInput
  serialNumber: StringOperationFilterInput
  unit: StringOperationFilterInput
  user: ApplicationUserFilterInput
  userId: StringOperationFilterInput
  type: ListingTypeFilterInput
  typeId: StringOperationFilterInput
  images: ListFilterInputTypeOfListingImageFilterInput
  isPublished: BooleanOperationFilterInput
  quantity: IntOperationFilterInput
  acceptsOffers: BooleanOperationFilterInput
  dateSold: DateTimeOperationFilterInput
  category: ListingCategoryFilterInput
  categoryId: StringOperationFilterInput
  reviews: ListFilterInputTypeOfListingReviewFilterInput
  usersWatching: ListFilterInputTypeOfUserListingWatchFilterInput
  id: UuidOperationFilterInput
  added: DateTimeOperationFilterInput
  updated: DateTimeOperationFilterInput
}

input ListingImageFilterInput {
  and: [ListingImageFilterInput!]
  or: [ListingImageFilterInput!]
  listing: ListingFilterInput
  listingId: UuidOperationFilterInput
  definition: ListByteOperationFilterInput
  order: IntOperationFilterInput
  id: UuidOperationFilterInput
  added: DateTimeOperationFilterInput
  updated: DateTimeOperationFilterInput
}

input ListingImageInput {
  listing: ListingInput!
  listingId: UUID!
  definition: [Byte!]!
  order: Int!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

input ListingInput {
  title: String!
  content: String!
  price: Decimal!
  msrp: Decimal
  partNumber: String
  serialNumber: String
  unit: String!
  user: ApplicationUserInput
  userId: String
  type: ListingTypeInput!
  typeId: String!
  images: [ListingImageInput!]!
  isPublished: Boolean!
  quantity: Int!
  acceptsOffers: Boolean!
  dateSold: DateTime
  category: ListingCategoryInput
  categoryId: String
  reviews: [ListingReviewInput!]!
  usersWatching: [UserListingWatchInput!]!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

input ListingListEditInput {
  id: UUID!
  quantity: Int!
  price: Decimal!
  isPublished: Boolean!
}

input ListingReviewEditInput {
  id: UUID
  listingId: UUID!
  title: String
  content: String!
  rating: Decimal!
}

input ListingReviewFilterInput {
  and: [ListingReviewFilterInput!]
  or: [ListingReviewFilterInput!]
  listing: ListingFilterInput
  listingId: UuidOperationFilterInput
  user: ApplicationUserFilterInput
  userId: StringOperationFilterInput
  title: StringOperationFilterInput
  content: StringOperationFilterInput
  rating: DecimalOperationFilterInput
  verified: BooleanOperationFilterInput
  id: UuidOperationFilterInput
  added: DateTimeOperationFilterInput
  updated: DateTimeOperationFilterInput
}

input ListingReviewInput {
  listing: ListingInput!
  listingId: UUID!
  user: ApplicationUserInput!
  userId: String!
  title: String
  content: String!
  rating: Decimal!
  verified: Boolean!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

input ListingSortInput {
  title: SortEnumType
  content: SortEnumType
  price: SortEnumType
  msrp: SortEnumType
  partNumber: SortEnumType
  serialNumber: SortEnumType
  unit: SortEnumType
  user: ApplicationUserSortInput
  userId: SortEnumType
  type: ListingTypeSortInput
  typeId: SortEnumType
  isPublished: SortEnumType
  quantity: SortEnumType
  acceptsOffers: SortEnumType
  dateSold: SortEnumType
  category: ListingCategorySortInput
  categoryId: SortEnumType
  id: SortEnumType
  added: SortEnumType
  updated: SortEnumType
}

input ListingTypeFilterInput {
  and: [ListingTypeFilterInput!]
  or: [ListingTypeFilterInput!]
  id: StringOperationFilterInput
  name: StringOperationFilterInput
}

input ListingTypeInput {
  id: String!
  name: String!
}

input ListingTypeSortInput {
  id: SortEnumType
  name: SortEnumType
}

input MessageFilterInput {
  and: [MessageFilterInput!]
  or: [MessageFilterInput!]
  subject: StringOperationFilterInput
  date: DateTimeOperationFilterInput
  content: StringOperationFilterInput
  fromUserId: StringOperationFilterInput
  fromUser: ApplicationUserFilterInput
  toUserId: StringOperationFilterInput
  toUser: ApplicationUserFilterInput
  id: UuidOperationFilterInput
  added: DateTimeOperationFilterInput
  updated: DateTimeOperationFilterInput
}

input MessageInput {
  subject: String!
  date: DateTime!
  content: String!
  fromUserId: String!
  fromUser: ApplicationUserInput!
  toUserId: String!
  toUser: ApplicationUserInput!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

input PostalCodeFilterInput {
  and: [PostalCodeFilterInput!]
  or: [PostalCodeFilterInput!]
  city: StringOperationFilterInput
  country: StringOperationFilterInput
  id: StringOperationFilterInput
  state: StringOperationFilterInput
}

input PostalCodeInput {
  city: String!
  country: String
  id: String!
  state: String!
}

input QuickListingEditInput {
  id: UUID!
  title: String!
  serialNumber: String
  partNumber: String
  quantity: Int!
  unit: String!
  price: Decimal!
  msrp: Decimal
  isPublished: Boolean!
  acceptsOffers: Boolean!
}

input QuickUserEditInput {
  id: String!
  firstName: String
  lastName: String
  businessName: String
  email: String!
  phone: String
  username: String!
  telegramUsername: String
  website: String
  location: String
  job: String
  about: String!
}

input RegisterUserEditInput {
  firstName: String
  lastName: String
  businessName: String
  email: String!
  phone: String
  username: String!
  telegramUsername: String
  website: String
  location: String
  job: String
  about: String!
  password: String!
  emailVerified: Boolean!
  phoneVerified: Boolean!
  sendEmailVerification: Boolean!
  sendPhoneVerification: Boolean!
  approved: Boolean!
  sellerApproved: Boolean!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UserEditInput {
  id: String!
  firstName: String
  lastName: String
  businessName: String
  email: String!
  phone: String
  username: String!
  telegramUsername: String
  website: String
  location: String
  job: String
  about: String!
  churchGroup: String!
  emailVerified: Boolean!
  phoneVerified: Boolean!
  approved: Boolean!
  sellerApproved: Boolean!
}

input UserListEditInput {
  id: String!
  firstName: String
  lastName: String
  businessName: String
  userName: String
  email: String!
  phoneNumber: String
  location: String
  approved: Boolean
  sellerApproved: Boolean
}

input UserListingCategoryFilterInput {
  and: [UserListingCategoryFilterInput!]
  or: [UserListingCategoryFilterInput!]
  user: ApplicationUserFilterInput
  userId: StringOperationFilterInput
  category: ListingCategoryFilterInput
  categoryId: StringOperationFilterInput
}

input UserListingCategoryInput {
  user: ApplicationUserInput!
  userId: String!
  category: ListingCategoryInput!
  categoryId: String!
}

input UserListingWatchFilterInput {
  and: [UserListingWatchFilterInput!]
  or: [UserListingWatchFilterInput!]
  user: ApplicationUserFilterInput
  userId: StringOperationFilterInput
  listing: ListingFilterInput
  listingId: UuidOperationFilterInput
  date: DateTimeOperationFilterInput
}

input UserListingWatchInput {
  user: ApplicationUserInput!
  userId: String!
  listing: ListingInput!
  listingId: UUID!
  date: DateTime!
}

input UserListingWatchSortInput {
  user: ApplicationUserSortInput
  userId: SortEnumType
  listing: ListingSortInput
  listingId: SortEnumType
  date: SortEnumType
}

input UserNotificationsEditInput {
  id: String!
  notifyOnMessage: Boolean!
}

input UserPostFilterInput {
  and: [UserPostFilterInput!]
  or: [UserPostFilterInput!]
  userId: StringOperationFilterInput
  user: ApplicationUserFilterInput
  content: StringOperationFilterInput
  title: StringOperationFilterInput
  media: ListByteOperationFilterInput
  date: DateTimeOperationFilterInput
  responses: ListFilterInputTypeOfUserPostResponseFilterInput
  id: UuidOperationFilterInput
  added: DateTimeOperationFilterInput
  updated: DateTimeOperationFilterInput
}

input UserPostInput {
  userId: String!
  user: ApplicationUserInput!
  content: String!
  title: String!
  media: [Byte!]!
  date: DateTime!
  responses: [UserPostResponseInput!]!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

input UserPostResponseFilterInput {
  and: [UserPostResponseFilterInput!]
  or: [UserPostResponseFilterInput!]
  postId: UuidOperationFilterInput
  post: UserPostFilterInput
  userId: StringOperationFilterInput
  user: ApplicationUserFilterInput
  content: StringOperationFilterInput
  isReaction: BooleanOperationFilterInput
  date: DateTimeOperationFilterInput
  id: UuidOperationFilterInput
  added: DateTimeOperationFilterInput
  updated: DateTimeOperationFilterInput
}

input UserPostResponseInput {
  postId: UUID!
  post: UserPostInput!
  userId: String!
  user: ApplicationUserInput!
  content: String!
  isReaction: Boolean!
  date: DateTime!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

enum SortEnumType {
  ASC
  DESC
}

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")

"The `Upload` scalar type represents a file upload."
scalar Upload